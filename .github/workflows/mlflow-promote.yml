name: MLflow Promotion

on:
  workflow_dispatch:
    inputs:
      experiment_id:
        description: 'ID of the experiment to promote'
        required: true
        type: string

env:
  KUBECONFIG_PATH: /tmp/kubeconfig
  AWS_REGION: us-east-1

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EKS cluster credentials
        uses: aws-actions/amazon-eks-authenticator@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ secrets.EKS_CLUSTER_NAME }}
          role-arn: ${{ secrets.EKS_CLUSTER_ROLE_ARN }}

      - name: Get experiment details
        run: |
          # Get experiment details from dev
          DEV_TRACKING_URI="http://mlflow-dev-service.${{ secrets.EKS_CLUSTER_NAME }}.svc.cluster.local:5000"
          EXPERIMENT=$(curl -s "$DEV_TRACKING_URI/api/2.0/mlflow/experiments/get" \
            -H "Content-Type: application/json" \
            -d "{\"experiment_id\": \"${{ github.event.inputs.experiment_id }}\"}")
          
          echo "Experiment details: $EXPERIMENT"
          echo "EXPERIMENT=$EXPERIMENT" >> $GITHUB_OUTPUT

      - name: Get runs from experiment
        run: |
          # Get all runs from the experiment
          DEV_TRACKING_URI="http://mlflow-dev-service.${{ secrets.EKS_CLUSTER_NAME }}.svc.cluster.local:5000"
          RUNS=$(curl -s "$DEV_TRACKING_URI/api/2.0/mlflow/runs/search" \
            -H "Content-Type: application/json" \
            -d "{\"experiment_ids\": [\"${{ github.event.inputs.experiment_id }}\"]}")
          
          echo "Runs: $RUNS"
          echo "RUNS=$RUNS" >> $GITHUB_OUTPUT

      - name: Copy artifacts to production
        run: |
          # Copy artifacts from dev to prod S3 bucket
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/mlflow-dev-artifacts/${{ github.event.inputs.experiment_id }} \
            s3://${{ secrets.S3_BUCKET }}/mlflow-artifacts/${{ github.event.inputs.experiment_id }} \
            --recursive

      - name: Register experiment in production
        run: |
          # Register experiment in production
          PROD_TRACKING_URI="http://mlflow-service.${{ secrets.EKS_CLUSTER_NAME }}.svc.cluster.local:5000"
          
          # Create experiment if it doesn't exist
          curl -s -X POST "$PROD_TRACKING_URI/api/2.0/mlflow/experiments/create" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"${{ github.event.inputs.experiment_name }}\"}"

      - name: Register runs in production
        run: |
          # Register each run in production
          for RUN in $(echo ${{ steps.get_runs.outputs.RUNS }} | jq -r '.runs[] | @base64'); do
            _jq() {
              echo ${RUN} | base64 --decode | jq -r ${1}
            }
            
            RUN_ID=$(_jq '.info.run_id')
            curl -s -X POST "$PROD_TRACKING_URI/api/2.0/mlflow/runs/create" \
              -H "Content-Type: application/json" \
              -d "{
                \"experiment_id\": \"${{ github.event.inputs.experiment_id }}\",
                \"start_time\": \"$(_jq '.info.start_time')\",
                \"tags\": $(_jq '.tags')
              }"
          done

      - name: Send Slack notification
        if: ${{ success() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          authorName: MLflow Promotion
          fields: repo,message,commit,author,action,workflow,branch,env
          slackUsername: github-actions
          footerIcon: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          slackWebhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            Experiment ${{ github.event.inputs.experiment_id }} has been successfully promoted to production!
            - ${_jq '.name'}
            - ${_jq '.description'}
            - ${_jq '.artifact_location'}
