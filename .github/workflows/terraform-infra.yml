name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Recreate existing resources if they exist'
        required: false
        default: false
        type: boolean
      action:
        description: 'Action to perform (plan/apply/destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      source_dir:
        description: 'Source directory for Terraform files'
        required: true
        default: 'infra/terraform'
        type: string
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      TF_ACTION: ${{ github.event.inputs.action || 'plan' }}
      TF_SOURCE_DIR: ${{ github.event.inputs.source_dir || 'infra/terraform' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars <<EOF
          environment = "${{ env.ENVIRONMENT }}"
          cluster_name = "mlflow-cluster-${{ env.ENVIRONMENT }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          region = "${{ env.AWS_REGION }}"
          EOF
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Only run imports when action is "apply" and recreate is false
      - name: Import existing resources
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          set +e  # Don't exit on error
          echo "Starting resource import for environment: ${{ env.ENVIRONMENT }}"

          # Import S3 Bucket
          echo "Checking for S3 bucket: mlflow-backend-${{ env.ENVIRONMENT }}"
          aws s3api head-bucket --bucket mlflow-backend-${{ env.ENVIRONMENT }} 2>/dev/null
          if [ $? -eq 0 ]; then
            echo "Importing S3 bucket: mlflow-backend-${{ env.ENVIRONMENT }}"
            terraform import module.s3.aws_s3_bucket.mlflow_bucket mlflow-backend-${{ env.ENVIRONMENT }}
            echo "S3 bucket import result: $?"
          else
            echo "S3 bucket not found, skipping import"
          fi
          
          # Import IAM User
          echo "Checking for IAM user: mlflow-user-${{ env.ENVIRONMENT }}"
          USER_CHECK=$(aws iam get-user --user-name mlflow-user-${{ env.ENVIRONMENT }} 2>&1)
          if ! echo "$USER_CHECK" | grep -q "NoSuchEntity"; then
            echo "Importing IAM user: mlflow-user-${{ env.ENVIRONMENT }}"
            terraform import module.s3.aws_iam_user.mlflow_user mlflow-user-${{ env.ENVIRONMENT }}
            echo "IAM user import result: $?"
          else
            echo "IAM user not found, skipping import"
          fi
          
          # Import IAM Policy
          echo "Checking for IAM policy: mlflow-s3-access"
          POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='mlflow-s3-access'].Arn" --output text)
          if [ -n "$POLICY_ARN" ] && [ "$POLICY_ARN" != "None" ]; then
            echo "Importing IAM policy: $POLICY_ARN"
            terraform import module.s3.aws_iam_policy.mlflow_s3_policy "$POLICY_ARN"
            echo "IAM policy import result: $?"
          else
            echo "IAM policy not found, skipping import"
          fi
          
          # Import DB Subnet Group
          echo "Checking for DB subnet group: mlflow-db-subnet-group-${{ env.ENVIRONMENT }}"
          DB_SUBNET_CHECK=$(aws rds describe-db-subnet-groups --db-subnet-group-name mlflow-db-subnet-group-${{ env.ENVIRONMENT }} 2>&1)
          if ! echo "$DB_SUBNET_CHECK" | grep -q "DBSubnetGroupNotFoundFault"; then
            echo "Importing DB subnet group: mlflow-db-subnet-group-${{ env.ENVIRONMENT }}"
            terraform import module.rds.aws_db_subnet_group.mlflow mlflow-db-subnet-group-${{ env.ENVIRONMENT }}
            echo "DB subnet group import result: $?"
          else
            echo "DB subnet group not found, skipping import"
          fi
          
          # Import CloudWatch Log Group
          echo "Checking for CloudWatch log group: /aws/eks/mlflow-cluster-${{ env.ENVIRONMENT }}/cluster"
          CW_LOG_CHECK=$(aws logs describe-log-groups --log-group-name /aws/eks/mlflow-cluster-${{ env.ENVIRONMENT }}/cluster 2>&1)
          if ! echo "$CW_LOG_CHECK" | grep -q "ResourceNotFoundException"; then
            echo "Importing CloudWatch log group: /aws/eks/mlflow-cluster-${{ env.ENVIRONMENT }}/cluster"
            terraform import module.eks.module.eks.aws_cloudwatch_log_group.this[0] /aws/eks/mlflow-cluster-${{ env.ENVIRONMENT }}/cluster
            echo "CloudWatch log group import result: $?"
          else
            echo "CloudWatch log group not found, skipping import"
          fi
          
          # Import KMS Alias
          echo "Checking for KMS alias: alias/eks/mlflow-cluster-${{ env.ENVIRONMENT }}"
          KMS_ALIAS_CHECK=$(aws kms list-aliases --query "Aliases[?AliasName=='alias/eks/mlflow-cluster-${{ env.ENVIRONMENT }}'].TargetKeyId" --output text)
          if [ -n "$KMS_ALIAS_CHECK" ] && [ "$KMS_ALIAS_CHECK" != "None" ]; then
            echo "Importing KMS alias: alias/eks/mlflow-cluster-${{ env.ENVIRONMENT }}"
            terraform import 'module.eks.module.eks.module.kms.aws_kms_alias.this["cluster"]' alias/eks/mlflow-cluster-${{ env.ENVIRONMENT }}
            echo "KMS alias import result: $?"
          else
            echo "KMS alias not found, skipping import"
          fi
          
          echo "Import operations completed"
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      # If action is apply and recreate is true, run "terraform state rm" on resources
      - name: Remove resources from state if recreating
        if: ${{ github.event.inputs.action == 'apply' && github.event.inputs.recreate == true }}
        run: |
          echo "Removing resources from state for recreation"
          terraform state list | grep -E "(aws_s3_bucket|aws_iam_user|aws_iam_policy|aws_db_subnet_group|aws_cloudwatch_log_group|aws_kms_alias)" || echo "No matching resources in state"
          terraform state list | grep -E "(aws_s3_bucket|aws_iam_user|aws_iam_policy|aws_db_subnet_group|aws_cloudwatch_log_group|aws_kms_alias)" | xargs -r terraform state rm
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Terraform Plan
        if: ${{ env.TF_ACTION == 'plan' }}
        run: terraform plan -input=false -var-file=terraform.tfvars
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Terraform Apply
        if: ${{ env.TF_ACTION == 'apply' }}
        run: |
          # Add flags to target only specific resources that need to be created
          IMPORT_STATUS=$?
          if [[ $IMPORT_STATUS -ne 0 && "${{ github.event.inputs.recreate }}" == "false" ]]; then
            echo "Warning: Import operations didn't complete successfully. Apply may fail for existing resources."
          fi
          terraform apply -auto-approve -input=false -var-file=terraform.tfvars
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Terraform Destroy
        if: ${{ env.TF_ACTION == 'destroy' }}
        run: terraform destroy -auto-approve -input=false -var-file=terraform.tfvars
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}