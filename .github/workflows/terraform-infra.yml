name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (plan/apply/destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      source_dir:
        description: 'Source directory for Terraform files'
        required: true
        default: 'infra/terraform'
        type: string
  pull_request:
    branches:
      - infra/setup_ml_flow
  push:
    branches:
      - infra/setup_ml_flow

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy Terraform files safely
        run: |
          # Use dispatch input if available, or fallback to default
          INPUT_SOURCE_DIR="${{ inputs.source_dir }}"
          FALLBACK_DIR="infra/terraform"

          if [ -z "$INPUT_SOURCE_DIR" ]; then
            echo "No input for source_dir detected. Defaulting to: $FALLBACK_DIR"
            SOURCE_DIR="${GITHUB_WORKSPACE}/$FALLBACK_DIR"
          else
            SOURCE_DIR="${GITHUB_WORKSPACE}/$INPUT_SOURCE_DIR"
          fi

          TARGET_DIR="${GITHUB_WORKSPACE}/target-terraform"

          echo "SOURCE: $SOURCE_DIR"
          echo "TARGET: $TARGET_DIR"

          if [ "$SOURCE_DIR" == "$TARGET_DIR" ]; then
            echo "ERROR: Source and target directories are the same. Aborting."
            exit 1
          fi

          mkdir -p "$TARGET_DIR"
          cp -r "$SOURCE_DIR/." "$TARGET_DIR/"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure Terraform
        run: |
          # Set fallback values if inputs are not defined (non-manual runs)
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          CLUSTER_NAME="mlflow-cluster-${ENVIRONMENT}"

          terraform init

          # Get subnet and VPC info from AWS
          SUBNET_IDS=$(aws ec2 describe-subnets \
            --query "Subnets[?Tags[?Key=='Environment' && Value=='${ENVIRONMENT}']].SubnetId" \
            --output text)

          VPC_ID=$(aws ec2 describe-vpcs \
            --query "Vpcs[?Tags[?Key=='Environment' && Value=='${ENVIRONMENT}']].VpcId" \
            --output text)

          # Create terraform.tfvars
          cat > terraform.tfvars <<EOF
          environment = "${ENVIRONMENT}"
          cluster_name = "${CLUSTER_NAME}"
          subnet_ids = [${SUBNET_IDS}]
          vpc_id = "${VPC_ID}"
          EOF
        working-directory: ${{ github.workspace }}/${{ inputs.source_dir || 'infra/erraform' }}

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: |
          cd ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          cd ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          cd ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}
          terraform destroy -auto-approve

      - name: Save Terraform State
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}/terraform.tfstate

      - name: Get Outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          cd ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}
          terraform output -json > terraform-outputs.json
          cat terraform-outputs.json
        id: get_outputs

      - name: Save Outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}/terraform-outputs.json

      - name: Cleanup
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          cd ${GITHUB_WORKSPACE}/${{ github.event.inputs.source_dir }}
          rm -f terraform.tfstate
          rm -f terraform.tfstate.backup
          rm -f terraform.tfvars
          rm -f terraform-outputs.json
