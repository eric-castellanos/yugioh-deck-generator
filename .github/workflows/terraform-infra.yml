name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Recreate existing resources if they exist'
        required: false
        default: false
        type: boolean
      action:
        description: 'Action to perform (plan/apply/destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      source_dir:
        description: 'Source directory for Terraform files'
        required: true
        default: 'infra/terraform'
        type: string
  pull_request:
    branches:
      - infra/setup_ml_flow
  push:
    branches:
      - infra/setup_ml_flow

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_ACTION: ${{ github.event.inputs.action || 'plan' }}
      TF_SOURCE_DIR: ${{ github.event.inputs.source_dir || 'infra/terraform' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure MLFlow Terraform
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          CLUSTER_NAME="mlflow-cluster-${ENVIRONMENT}"

      - name: Create terraform.tfvars file
        run: |
          cat > terraform.tfvars <<EOF
          environment = "${{ github.event.inputs.environment || 'dev' }}"
          cluster_name = "mlflow-cluster-${{ github.event.inputs.environment || 'dev' }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          region = "${{ env.AWS_REGION }}"
          bucket_name = "mlflow-backend-${{ github.event.inputs.environment || 'dev' }}"
          mlflow_user = "mlflow-user-${{ github.event.inputs.environment || 'dev' }}"
          EOF
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Check Existing VPCs
        id: check_vpc
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Project,Values=mlflow" "Name=tag:Environment,Values=${{ github.event.inputs.environment || 'dev' }}" --query 'Vpcs[0].VpcId' --output text)
          if [ "$VPC_ID" != "None" ]; then
            echo "VPC_EXISTS=true" >> $GITHUB_OUTPUT
            echo "VPC_ID=$VPC_ID" >> $GITHUB_OUTPUT
          else
            echo "VPC_EXISTS=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ github.workspace }}/infra/terraform/vpc

      - name: Set VPC Variables
        run: |
          if [ "${{ steps.check_vpc.outputs.VPC_EXISTS }}" = "true" ]; then
            echo "VPC_ID=${{ steps.check_vpc.outputs.VPC_ID }}" >> $GITHUB_ENV
          else
            echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          fi
        working-directory: ${{ github.workspace }}/infra/terraform/vpc

      - name: Import Existing Resources
        if: ${{ env.TF_ACTION == 'apply' }}
        run: |
          terraform init -upgrade
          if aws s3api head-bucket --bucket mlflow-backend-${{ github.event.inputs.environment }} 2>/dev/null; then
            terraform import module.s3.aws_s3_bucket.mlflow_bucket mlflow-backend-${{ github.event.inputs.environment }}
          fi
          if aws iam get-user --user-name mlflow-user-${{ github.event.inputs.environment }} 2>/dev/null; then
            terraform import module.s3.aws_iam_user.mlflow_user mlflow-user-${{ github.event.inputs.environment }}
          fi
          if aws iam list-policies --query "Policies[?PolicyName=='mlflow-s3-access'].Arn" --output text | grep -q .; then
            POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='mlflow-s3-access'].Arn" --output text)
            terraform import module.s3.aws_iam_policy.mlflow_s3_policy $POLICY_ARN
          fi
          if aws logs describe-log-groups --log-group-name /aws/eks/mlflow-cluster-${{ github.event.inputs.environment }}/cluster 2>/dev/null; then
            terraform import module.eks.module.eks.aws_cloudwatch_log_group.this[0] /aws/eks/mlflow-cluster-${{ github.event.inputs.environment }}/cluster
          fi
          if aws kms list-aliases --query "Aliases[?AliasName=='alias/eks/mlflow-cluster-${{ github.event.inputs.environment }}'].TargetKeyId" --output text | grep -q .; then
            terraform import module.eks.module.eks.module.kms.aws_kms_alias.this["cluster"] alias/eks/mlflow-cluster-${{ github.event.inputs.environment }}
          fi

          terraform state list || echo "No state yet"
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}

      - name: Terraform Apply
        if: ${{ env.TF_ACTION == 'apply' }}
        run: |
          terraform init -upgrade
          terraform plan -out=tfplan

          MAX_RETRIES=3
          RETRY_DELAY=10
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Attempt $i of $MAX_RETRIES"
            if terraform apply -auto-approve tfplan; then
              echo "Terraform apply successful"
              break
            else
              echo "Terraform apply failed, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
              if [[ $i -lt $MAX_RETRIES ]]; then
                echo "Destroying problematic resources..."
                terraform destroy -auto-approve \
                  -target="module.s3.aws_s3_bucket.mlflow_bucket" \
                  -target="module.s3.aws_iam_user.mlflow_user" \
                  -target="module.s3.aws_iam_policy.mlflow_s3_policy" \
                  -target="module.eks.module.eks.aws_cloudwatch_log_group.this[0]" \
                  -target="module.eks.module.eks.module.kms.aws_kms_alias.this[\"cluster\"]"
              fi
            fi
          done

          if [[ $? -ne 0 ]]; then
            echo "All attempts failed. Please check the logs for details."
            exit 1
          fi
        working-directory: ${{ github.workspace }}/${{ env.TF_SOURCE_DIR }}
