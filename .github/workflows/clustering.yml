name: HDBSCAN Clustering Pipeline

on:
  workflow_dispatch:
    inputs:
      feature_type:
        description: 'Feature type to use'
        required: true
        default: 'combined'
        type: choice
        options:
        - tfidf
        - embeddings  
        - combined
        - all
      experiment_config:
        description: 'Experiment configuration'
        required: true
        default: 'combined_grid_search'
        type: choice
        options:
        - pca_euclidean
        - umap_euclidean
        - combined_grid_search
        - all
      force_register:
        description: 'Force register model regardless of criteria'
        required: false
        default: false
        type: boolean

  push:
    branches:
      - feature/clustering_model
    paths:
      - 'src/model/clustering/**'
      - 'src/utils/clustering/**'
      - 'src/utils/mlflow/**'

  pull_request:
    paths:
      - 'src/model/clustering/**'
      - 'src/utils/clustering/**'
      - 'src/utils/mlflow/**'

jobs:
  clustering:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature_type: ${{ github.event.inputs.feature_type && fromJson(format('["{0}"]', github.event.inputs.feature_type)) || fromJson('["combined"]') }}
        config: ${{ github.event.inputs.experiment_config && fromJson(format('["{0}"]', github.event.inputs.experiment_config)) || fromJson('["pca_euclidean"]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Get infrastructure information
        id: infra-info
        run: |
          # Get RDS endpoint
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier mlflow-db-dev \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text 2>/dev/null || echo "")
          
          # Get S3 bucket name  
          S3_BUCKET=$(aws s3api list-buckets \
            --query 'Buckets[?contains(Name, `yugioh`)].Name' \
            --output text 2>/dev/null || echo "yugioh-deck-generator")
          
          echo "rds_endpoint=${RDS_ENDPOINT}" >> $GITHUB_OUTPUT
          echo "s3_bucket=${S3_BUCKET}" >> $GITHUB_OUTPUT

      - name: Set up environment variables
        run: |
          echo "MLFLOW_DB_PASSWORD=${{ secrets.MLFLOW_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=${{ steps.infra-info.outputs.rds_endpoint }}" >> $GITHUB_ENV
          echo "S3_BUCKET=${{ steps.infra-info.outputs.s3_bucket }}" >> $GITHUB_ENV
          echo "AWS_PROFILE=default" >> $GITHUB_ENV

      - name: Start MLflow service
        run: |
          # Check if MLflow is already running and healthy
          if docker compose -f docker-compose.local-mlflow.yml ps mlflow-local | grep -q "healthy"; then
            echo "MLflow is already running and healthy!"
          else
            echo "Starting MLflow server..."
            
            # Clean up any existing containers
            docker compose -f docker-compose.local-mlflow.yml down mlflow-local 2>/dev/null || true
            
            # Start MLflow
            docker compose -f docker-compose.local-mlflow.yml up -d mlflow-local
            
            # Wait for MLflow to be healthy using Docker health check
            echo "Waiting for MLflow to be healthy..."
            RETRY_COUNT=0
            MAX_RETRIES=30  # 30 * 10 seconds = 5 minutes
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              HEALTH_STATUS=$(docker compose -f docker-compose.local-mlflow.yml ps mlflow-local --format "{{.Health}}" 2>/dev/null || echo "starting")
              
              case $HEALTH_STATUS in
                "healthy")
                  echo "MLflow is healthy!"
                  break
                  ;;
                "unhealthy")
                  echo "MLflow container is unhealthy. Showing logs:"
                  docker compose -f docker-compose.local-mlflow.yml logs mlflow-local --tail=50
                  exit 1
                  ;;
                *)
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  echo "Attempt $RETRY_COUNT/$MAX_RETRIES: MLflow status: $HEALTH_STATUS, waiting 10 seconds..."
                  
                  # Show container logs periodically
                  if [ $((RETRY_COUNT % 6)) -eq 0 ]; then  # Every minute
                    echo "Container logs (last 20 lines):"
                    docker compose -f docker-compose.local-mlflow.yml logs mlflow-local --tail=20
                  fi
                  
                  sleep 10
                  ;;
              esac
            done
            
            # Final check
            FINAL_STATUS=$(docker compose -f docker-compose.local-mlflow.yml ps mlflow-local --format "{{.Health}}" 2>/dev/null || echo "unknown")
            if [ "$FINAL_STATUS" != "healthy" ]; then
              echo "MLflow failed to become healthy within timeout. Final status: $FINAL_STATUS"
              echo "Final container logs:"
              docker compose -f docker-compose.local-mlflow.yml logs mlflow-local
              echo ""
              echo "Container status:"
              docker compose -f docker-compose.local-mlflow.yml ps mlflow-local
              exit 1
            fi
          fi

      - name: Verify MLflow connection
        run: |
          echo "Verifying MLflow server connection..."
          
          # Test basic connectivity
          curl -f http://localhost:5000/ || {
            echo "Basic connectivity test failed"
            exit 1
          }
          
          # Test MLflow API
          curl -f http://localhost:5000/api/2.0/mlflow/experiments/search || {
            echo "MLflow API test failed"
            exit 1
          }
          
          echo "MLflow server is healthy and API is responding!"

      - name: Show container status
        run: |
          echo "Current container status:"
          docker compose -f docker-compose.local-mlflow.yml ps
          echo ""
          echo "Docker system info:"
          docker system df

      - name: Run clustering experiment
        run: |
          echo "Building clustering image..."
          docker compose -f docker-compose.local-mlflow.yml build clustering
          
          echo "Running clustering experiment with parameters:"
          echo "  Feature type: ${{ matrix.feature_type }}"
          echo "  Config: ${{ matrix.config }}"
          echo "  Force register: ${{ github.event.inputs.force_register }}"
          
          # Run clustering with matrix parameters
          docker compose -f docker-compose.local-mlflow.yml run --rm clustering \
            python src/model/clustering/hdbscan-clustering.py \
            --feature-type ${{ matrix.feature_type }} \
            --experiment-config ${{ matrix.config }} \
            ${{ github.event.inputs.force_register == 'true' && '--force-register' || '' }}
          
          echo "Clustering experiment completed successfully!"

      - name: Check MLflow experiments
        if: always()
        run: |
          echo "Checking MLflow experiments..."
          curl -s http://localhost:5000/api/2.0/mlflow/experiments/search | jq '.'

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.local-mlflow.yml down
          docker system prune -f